// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  name            String
  email           String        @unique
  image           String
  ideas           Idea[]        @relation("UserIdea")
  upvotedIdeas    Idea[]        @relation("UserUpvotedIdea")
  interestedIdeas Idea[]        @relation("UserInterestedIdea")
  projects        Project[]
  upvotedProjects Project[]     @relation("UserUpvotedProject")
  suggestions     Suggestion[]
  profiles        UserProfile[]
  bio             String?
  username        String?
}

model UserProfile {
  id      Int         @id @default(autoincrement())
  profileUrl String
  type    ProfileType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user    User        @relation(fields: [userId], references: [id])
  userId  Int
  @@unique([userId, type])
}

enum ProfileType {
  Dev
  Medium
  Hashnode
  StackOverflow
  GitHub
  LinkedIn
  Twitter
  Portfolio
}

model Idea {
  id           Int          @id @default(autoincrement())
  title        String       @unique
  domain       String
  description  String
  features     Feature[]
  tags         IdeaTag[]
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], name: "UserIdea")
  userId       Int
  upvotes      Int          @default(0)
  suggestions  Suggestion[]
  upvotedBy    User[]       @relation(name: "UserUpvotedIdea")
  interestedBy User[]       @relation(name: "UserInterestedIdea")
}

model Feature {
  id      Int    @id @default(autoincrement())
  feature String
  idea    Idea   @relation(fields: [ideaId], references: [id])
  ideaId  Int
}

model IdeaTag {
  id     Int    @id @default(autoincrement())
  tag    String
  idea   Idea   @relation(fields: [ideaId], references: [id])
  ideaId Int
}

model Suggestion {
  id         Int      @id @default(autoincrement())
  suggestion String
  createdAt  DateTime @default(now())
  idea       Idea     @relation(fields: [ideaId], references: [id])
  ideaId     Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Project {
  id            Int          @id @default(autoincrement())
  name          String
  title         String
  domain        String
  description   String
  repositoryURL String       @unique
  guidelines    String
  technologies  Technology[]
  tags          ProjectTag[]
  createdAt     DateTime     @default(now())
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  upvotes       Int          @default(0)
  upvotedBy     User[]       @relation(name: "UserUpvotedProject")
}

model Technology {
  id         Int     @id @default(autoincrement())
  technology String
  project    Project @relation(fields: [projectId], references: [id])
  projectId  Int
}

model ProjectTag {
  id        Int     @id @default(autoincrement())
  tag       String
  idea      Project @relation(fields: [projectId], references: [id])
  projectId Int
}
